# -*- coding: utf-8 -*-
#
# Sphinx configuration for aiida-hyperqueue
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import time

import aiida_hyperqueue
from aiida import load_profile
from aiida.storage.sqlite_temp import SqliteTempBackend


# -- AiiDA-related setup --------------------------------------------------
temp_profile = SqliteTempBackend.create_profile("temp-profile")
load_profile(temp_profile, allow_switch=True)

# -- General configuration ------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "1.5"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.mathjax",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
    "aiida.sphinxext",
    "myst_parser",
]

intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "aiida": ("https://aiida-core.readthedocs.io/en/latest", None),
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix of source filenames.
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
# ~ master_doc = 'index'
master_doc = "index"

# General information about the project.
project = "aiida-hyperqueue"
copyright_first_year = "2021"
copyright_owners = "The AiiDA Team"

current_year = str(time.localtime().tm_year)
copyright_year_string = (
    current_year
    if current_year == copyright_first_year
    else "{}-{}".format(copyright_first_year, current_year)
)
# pylint: disable=redefined-builtin
copyright = "{}, {}. All rights reserved".format(
    copyright_year_string, copyright_owners
)

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The full version, including alpha/beta/rc tags.
release = aiida_hyperqueue.__version__
# The short X.Y version.
version = ".".join(release.split(".")[:2])

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# exclude_patterns = ['doc.rst']
# ~ exclude_patterns = ['index.rst']

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = True

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# -- Options for HTML output ----------------------------------------------

html_theme = "sphinx_book_theme"

html_theme_options = {
    "repository_url": "https://github.com/aiidateam/aiida-hyperqueue",
    "use_repository_button": True,
}

html_logo = "img/AiiDA_transparent_logo.png"

html_use_opensearch = "http://aiida-hyperqueue.readthedocs.io"

html_search_language = "en"

htmlhelp_basename = "aiida-hyperqueue-doc"

myst_enable_extensions = [
    "colon_fence",
]

# -------------------------------------------------------------------------

# def run_apidoc(_):
#     """Runs sphinx-apidoc when building the documentation.

#     Needs to be done in conf.py in order to include the APIdoc in the
#     build on readthedocs.

#     See also https://github.com/rtfd/readthedocs.org/issues/1139
#     """
#     source_dir = os.path.abspath(os.path.dirname(__file__))
#     apidoc_dir = os.path.join(source_dir, 'apidoc')
#     package_dir = os.path.join(source_dir, os.pardir, os.pardir,
#                                'aiida_hyperqueue')

#     # In #1139, they suggest the route below, but this ended up
#     # calling sphinx-build, not sphinx-apidoc
#     #from sphinx.apidoc import main
#     #main([None, '-e', '-o', apidoc_dir, package_dir, '--force'])

#     import subprocess
#     cmd_path = 'sphinx-apidoc'
#     if hasattr(sys, 'real_prefix'):  # Check to see if we are in a virtualenv
#         # If we are, assemble the path manually
#         cmd_path = os.path.abspath(
#             os.path.join(sys.prefix, 'bin', 'sphinx-apidoc'))

#     options = [
#         '-o',
#         apidoc_dir,
#         package_dir,
#         '--private',
#         '--force',
#         '--no-toc',
#     ]

#     # See https://stackoverflow.com/a/30144019
#     env = os.environ.copy()
#     env['SPHINX_APIDOC_OPTIONS'] = 'members,special-members,private-members,undoc-members,show-inheritance'
#     subprocess.check_call([cmd_path] + options, env=env)

# def setup(app):
#     app.connect('builder-inited', run_apidoc)
