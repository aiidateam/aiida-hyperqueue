import click

from aiida.cmdline.utils import echo

from .root import cmd_root
from .params import arguments

@cmd_root.group("server")
def server_group():
    """Commands for interacting with the HQ server."""


@server_group.command("start")
@arguments.COMPUTER()
def cmd_start(computer):
    """Start the HyperQueue server."""

    with computer.get_transport() as transport:
        retval, _, _ = transport.exec_command_wait("hq server info")

    if retval == 0:
        echo.echo_info("server is already running!")
        return

    with computer.get_transport() as transport:
        # FIXME: It requires to sleep a bit after the nohup
        # see https://github.com/aiidateam/aiida-core/issues/6377
        # but the sleep solution is incorrect!!! Since the sleep will always return 0.
        # this not rely on https://github.com/aiidateam/aiida-core/pull/6452
        retval, _, stderr = transport.exec_command_wait(
            "nohup hq server start 1>$HOME/.hq-stdout 2>$HOME/.hq-stderr &",
            timeout=0.1,
        )

    if retval != 0:
        echo.echo_critical(f"unable to start the server: {stderr}")

    echo.echo_success("HQ server started!")

@server_group.command("stop")
@arguments.COMPUTER()
def cmd_stop(computer):
    """Start the HyperQueue server."""

    with computer.get_transport() as transport:
        retval, _, _ = transport.exec_command_wait("hq server info")

    if retval != 0:
        echo.echo_info("server is not running!")
        return

    echo.echo_info("Stop the hq server will close all allocs.")

    with computer.get_transport() as transport:
        retval, _, stderr = transport.exec_command_wait(
            "hq server stop"
        )

    if retval != 0:
        echo.echo_critical(f"unable to stop the server: {stderr}")

    echo.echo_success("HQ server stopped!")

@server_group.command("restart")
@arguments.COMPUTER()
@click.pass_context
def cmd_restart(ctx, computer):
    """Restart the HyperQueue server by stop and start again"""
    ctx.invoke(cmd_stop)
    ctx.invoke(cmd_start)


@server_group.command("info")
@arguments.COMPUTER()
def cmd_info(computer):
    """Get information on the HyperQueue server."""

    with computer.get_transport() as transport:
        retval, stdout, stderr = transport.exec_command_wait("hq server info")

    if retval != 0:
        echo.echo_critical(
            f"cannot obtain HyperQueue server information: {stderr}\n"
            "Try starting the server with `aiida-qe server start`."
        )

    echo.echo(stdout)
